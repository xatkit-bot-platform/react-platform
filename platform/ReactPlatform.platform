import platform "ChatPlatform"

Platform ReactPlatform extends ChatPlatform

path "com.xatkit.plugins.react.platform.ReactPlatform"

providers {
	input ReactIntentProvider {
		creates context react with lifespan 1 {
			sets parameter channel
			sets parameter username
			sets parameter rawMessage
			sets parameter hostname
			sets parameter ^url
			sets parameter origin
		}
	}
	event ReactEventProvider {
		event Client_Ready 
		creates context react_ready with lifespan 2 {
			/*
			 * Useless placeholder
			 */
			sets parameter ready
		}
		creates context react with lifespan 1 {
			/*
			 * Sets the channel parameter to allow Reply actions as response.
			 */
			sets parameter channel
		}
		event Client_Closed
		creates context react_closed with lifespan 2 {
			/*
			 * Useless placeholder
			 */
			 sets parameter closed
		}
		creates context react with lifespan 1 {
			/*
			 * Sets the channel parameter to allow Reply actions as response.
			 */
			sets parameter channel
		}
		
	}
}

actions {
	// We don't need to duplicated inherited actions, they are automatically inferred by inspecting the hierarchy
	//Reply(message : String)
	
	PostMessage(message : String, buttons : java.util.List<String>, channel : String)
	Reply(message : String, buttons : java.util.List<String>)
	
	
	// Formatting actions
	// These actions do not perform operations on the React client, but return Strings that can be displayed as messages.
	ItemizeList(list : java.util.List<?>)
	ItemizeList(list : java.util.List<?>, formatter : String)
	EnumerateList(list : java.util.List<?>)
	EnumerateList(list : java.util.List<?>, formatter : String)
	
	ReplyFileMessage(file : java.io.File)
	ReplyFileMessage(message : String, file : java.io.File)
	
	ToggleDarkMode
	Wait(delay : Integer)
}